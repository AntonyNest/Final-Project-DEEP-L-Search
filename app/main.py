# FastAPI entry point

"""
FastAPI Application Entry Point - –ì–æ–ª–æ–≤–Ω–∞ —Ç–æ—á–∫–∞ –≤—Ö–æ–¥—É –≤ —Å–∏—Å—Ç–µ–º—É.

–¶–µ–π –º–æ–¥—É–ª—å –≤–∏—Å—Ç—É–ø–∞—î —è–∫ Application Controller –≤ –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–Ω–æ–º—É –ø–∞—Ç–µ—Ä–Ω—ñ MVC.
–í—ñ–Ω –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞:

1. **–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –¥–æ–¥–∞—Ç–∫—É** - –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è FastAPI –∑ —É—Å—ñ–º–∞ –ø–æ—Ç—Ä—ñ–±–Ω–∏–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
2. **Middleware Pipeline** - –æ–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ —Ä—ñ–∑–Ω–∏—Ö —Ä—ñ–≤–Ω—è—Ö (CORS, –ª–æ–≥—É–≤–∞–Ω–Ω—è, –ø–æ–º–∏–ª–∫–∏)
3. **Dependency Injection** - –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è endpoints
4. **Application Lifecycle** - startup —Ç–∞ shutdown events
5. **Route Registration** - –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤—Å—ñ—Ö API endpoints
6. **Error Handling** - —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫

–ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥: Layered Architecture
- Presentation Layer (FastAPI routes)
- Application Layer (services coordination) 
- Domain Layer (business logic)
- Infrastructure Layer (databases, external APIs)
"""

import logging
import time
import traceback
from contextlib import asynccontextmanager
from typing import Dict, Any

import uvicorn
from fastapi import FastAPI, Request, HTTPException, Depends
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from fastapi.responses import JSONResponse
from fastapi.openapi.utils import get_openapi
from starlette.middleware.base import BaseHTTPMiddleware

# –ù–∞—à—ñ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
from app.config import settings
from app.services.search_service import search_service
from app.models.schemas import ErrorResponse, ErrorDetail
from app.utils.logger import setup_logging
from app.api.endpoints import search, documents

# –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–¥ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è–º –¥–æ–¥–∞—Ç–∫—É
setup_logging()
logger = logging.getLogger(__name__)


class TimingMiddleware(BaseHTTPMiddleware):
    """
    Middleware –¥–ª—è –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è —á–∞—Å—É –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—ñ–≤.
    
    –¶–µ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∫—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–ª–∏–≤–∏–π –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    ML —Å–∏—Å—Ç–µ–º, –¥–µ —á–∞—Å –≤—ñ–¥–≥—É–∫—É –º–æ–∂–µ —Å–∏–ª—å–Ω–æ –≤–∞—Ä—ñ—é–≤–∞—Ç–∏—Å—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥
    —Ä–æ–∑–º—ñ—Ä—É –∑–∞–ø–∏—Ç—É —Ç–∞ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞ –º–æ–¥–µ–ª—å.
    
    –ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–Ω–∏–π –ø–∞—Ç–µ—Ä–Ω: Decorator Pattern
    –û–±–≥–æ—Ä—Ç–∞—î –æ–±—Ä–æ–±–∫—É –∑–∞–ø–∏—Ç—É –¥–æ–¥–∞—Ç–∫–æ–≤–æ—é —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—é –±–µ–∑ –∑–º—ñ–Ω–∏ –æ—Å–Ω–æ–≤–Ω–æ—ó –ª–æ–≥—ñ–∫–∏.
    """
    
    async def dispatch(self, request: Request, call_next):
        # –ó–∞–ø–∏—Å—É—î–º–æ —á–∞—Å –ø–æ—á–∞—Ç–∫—É –æ–±—Ä–æ–±–∫–∏
        start_time = time.time()
        
        # –õ–æ–≥—É—î–º–æ –≤—Ö—ñ–¥–Ω–∏–π –∑–∞–ø–∏—Ç –¥–ª—è debugging
        logger.info(
            f"üîÑ Processing request: {request.method} {request.url.path} "
            f"from {request.client.host if request.client else 'unknown'}"
        )
        
        try:
            # –í–∏–∫–æ–Ω—É—î–º–æ –æ—Å–Ω–æ–≤–Ω—É –æ–±—Ä–æ–±–∫—É –∑–∞–ø–∏—Ç—É
            response = await call_next(request)
            
            # –û–±—á–∏—Å–ª—é—î–º–æ —á–∞—Å –æ–±—Ä–æ–±–∫–∏
            processing_time = time.time() - start_time
            
            # –î–æ–¥–∞—î–º–æ header –∑ —á–∞—Å–æ–º –æ–±—Ä–æ–±–∫–∏ –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞
            response.headers["X-Process-Time"] = str(round(processing_time * 1000, 2))
            
            # –õ–æ–≥—É—î–º–æ —É—Å–ø—ñ—à–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            logger.info(
                f"‚úÖ Request completed: {request.method} {request.url.path} "
                f"Status: {response.status_code} Time: {processing_time:.3f}s"
            )
            
            return response
            
        except Exception as exc:
            # –õ–æ–≥—É—î–º–æ –ø–æ–º–∏–ª–∫—É –∑ –ø–æ–≤–Ω–æ—é —Ç—Ä–∞—Å–æ—é
            processing_time = time.time() - start_time
            logger.error(
                f"‚ùå Request failed: {request.method} {request.url.path} "
                f"Time: {processing_time:.3f}s Error: {str(exc)}\n"
                f"Traceback: {traceback.format_exc()}"
            )
            
            # –ü–µ—Ä–µ–∫–∏–¥–∞—î–º–æ –≤–∏–∫–ª—é—á–µ–Ω–Ω—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤ exception handlers
            raise exc


@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    Lifecycle manager –¥–ª—è –¥–æ–¥–∞—Ç–∫—É.
    
    –¶–µ–π async context manager –∫–µ—Ä—É—î –∂–∏—Ç—Ç—î–≤–∏–º —Ü–∏–∫–ª–æ–º –¥–æ–¥–∞—Ç–∫—É:
    - startup: —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—ñ–≤, –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î, –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ML –º–æ–¥–µ–ª–µ–π
    - shutdown: graceful –∑—É–ø–∏–Ω–∫–∞, –∑–∞–∫—Ä–∏—Ç—Ç—è –∑'—î–¥–Ω–∞–Ω—å, cleanup —Ä–µ—Å—É—Ä—Å—ñ–≤
    
    –ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–Ω–∏–π –ø–∞—Ç–µ—Ä–Ω: Resource Acquisition Is Initialization (RAII)
    –ó–∞–±–µ–∑–ø–µ—á—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–µ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–µ—Å—É—Ä—Å–∞–º–∏ –≤ async —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ.
    """
    # === STARTUP PHASE ===
    logger.info("üöÄ Starting Document Search Service...")
    
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        logger.info("üîß Validating configuration...")
        if not settings.documents_path_obj.exists():
            logger.warning(f"Documents path does not exist: {settings.documents_path}")
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–æ—à—É–∫–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏
        logger.info("üß† Initializing AI components...")
        initialization_success = await search_service.initialize_system()
        
        if not initialization_success:
            logger.error("‚ùå Failed to initialize search system")
            # –í production —Ç—É—Ç –º–æ–∂–Ω–∞ –±—É–ª–æ –± –ø—Ä–∏–ø–∏–Ω–∏—Ç–∏ –∑–∞–ø—É—Å–∫
            # raise RuntimeError("Search system initialization failed")
        else:
            logger.info("‚úÖ Search system initialized successfully")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º–∏ –¥–ª—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É
        stats = search_service.get_document_stats()
        logger.info(f"üìä System stats: {stats}")
        
        logger.info("üéâ Application startup completed successfully!")
        
        # Yield –æ–∑–Ω–∞—á–∞—î —â–æ –¥–æ–¥–∞—Ç–æ–∫ –≥–æ—Ç–æ–≤–∏–π –ø—Ä–∏–π–º–∞—Ç–∏ –∑–∞–ø–∏—Ç–∏
        yield
        
    except Exception as e:
        logger.error(f"üí• Startup failed: {str(e)}")
        raise
    
    # === SHUTDOWN PHASE ===
    logger.info("üõë Shutting down Document Search Service...")
    
    try:
        # –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—ñ–≤ –¥–ª—è –∑–≤—ñ–ª—å–Ω–µ–Ω–Ω—è –ø–∞–º'—è—Ç—ñ
        logger.info("üßπ Cleaning up caches...")
        cache_result = search_service.clear_cache()
        logger.info(f"Cache cleanup result: {cache_result}")
        
        # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –∑–∞–∫—Ä–∏—Ç—Ç—è –∑'—î–¥–Ω–∞–Ω—å —ñ —Ç.–¥.
        logger.info("üíæ Saving final statistics...")
        
        logger.info("üëã Application shutdown completed")
        
    except Exception as e:
        logger.error(f"‚ö†Ô∏è Error during shutdown: {str(e)}")


def create_application() -> FastAPI:
    """
    Factory function –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è FastAPI –¥–æ–¥–∞—Ç–∫—É.
    
    –¶–µ–π –ø—ñ–¥—Ö—ñ–¥ –¥–æ–∑–≤–æ–ª—è—î –ª–µ–≥–∫–æ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ —Ä—ñ–∑–Ω—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –¥–æ–¥–∞—Ç–∫—É
    –¥–ª—è development, testing —Ç–∞ production —Å–µ—Ä–µ–¥–æ–≤–∏—â.
    
    –ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–Ω–∏–π –ø–∞—Ç–µ—Ä–Ω: Factory Pattern
    –Ü–Ω–∫–∞–ø—Å—É–ª—é—î —Å–∫–ª–∞–¥–Ω—É –ª–æ–≥—ñ–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç—É –≤ –æ–¥–Ω—ñ–π —Ñ—É–Ω–∫—Ü—ñ—ó.
    """
    # –°—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤–∏–π FastAPI –¥–æ–¥–∞—Ç–æ–∫ –∑ lifecycle management
    app = FastAPI(
        title=settings.app_name,
        version=settings.app_version,
        description="""
        üîç **–°–µ—Ä–≤—ñ—Å —Å–µ–º–∞–Ω—Ç–∏—á–Ω–æ–≥–æ –ø–æ—à—É–∫—É –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤**
        
        –°–∏—Å—Ç–µ–º–∞ –¥–ª—è —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø–æ—à—É–∫—É —Ç–∞ –∞–Ω–∞–ª—ñ–∑—É –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º 
        —à—Ç—É—á–Ω–æ–≥–æ —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É —Ç–∞ –≤–µ–∫—Ç–æ—Ä–Ω–∏—Ö –±–∞–∑ –¥–∞–Ω–∏—Ö.
        
        **–û—Å–Ω–æ–≤–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ:**
        - üß† –°–µ–º–∞–Ω—Ç–∏—á–Ω–∏–π –ø–æ—à—É–∫ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –µ–º–±–µ–¥–∏–Ω–≥—ñ–≤
        - üìÑ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ .docx, .doc, .pdf —Ñ–æ—Ä–º–∞—Ç—ñ–≤
        - ‚ö° –í–∏—Å–æ–∫–æ—à–≤–∏–¥–∫—ñ—Å–Ω–∏–π –≤–µ–∫—Ç–æ—Ä–Ω–∏–π –ø–æ—à—É–∫ —á–µ—Ä–µ–∑ Qdrant
        - üéØ –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ –º–µ—Ç–∞–¥–∞–Ω–∏–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
        - üìä –î–µ—Ç–∞–ª—å–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞ —Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        
        **–¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó:**
        - FastAPI + Pydantic –¥–ª—è API
        - Sentence Transformers –¥–ª—è –µ–º–±–µ–¥–∏–Ω–≥—ñ–≤  
        - Qdrant —è–∫ –≤–µ–∫—Ç–æ—Ä–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–∏—Ö
        - Docker –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü—ñ—ó
        """,
        lifespan=lifespan,  # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ lifecycle management
        docs_url="/docs",   # Swagger UI –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ /docs
        redoc_url="/redoc"  # ReDoc –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ /redoc
    )
    
    return app


def configure_cors(app: FastAPI) -> None:
    """
    –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è CORS (Cross-Origin Resource Sharing).
    
    CORS –∫—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–ª–∏–≤–∏–π –¥–ª—è web –¥–æ–¥–∞—Ç–∫—ñ–≤, —è–∫—ñ –∑–≤–µ—Ä—Ç–∞—é—Ç—å—Å—è –¥–æ API
    –∑ –±—Ä–∞—É–∑–µ—Ä–∞. –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –±–µ–∑–ø–µ—á–Ω—ñ –∞–ª–µ –≥–Ω—É—á–∫—ñ –ø—Ä–∞–≤–∏–ª–∞.
    """
    app.add_middleware(
        CORSMiddleware,
        allow_origins=settings.cors_origins,  # –î–æ–∑–≤–æ–ª–µ–Ω—ñ –¥–æ–º–µ–Ω–∏
        allow_credentials=True,               # –î–æ–∑–≤–æ–ª–∏—Ç–∏ cookies/auth headers
        allow_methods=["GET", "POST", "PUT", "DELETE"],  # HTTP –º–µ—Ç–æ–¥–∏
        allow_headers=["*"],                  # –î–æ–∑–≤–æ–ª–µ–Ω—ñ headers
        expose_headers=["X-Process-Time"]     # Headers –≤–∏–¥–∏–º—ñ –∫–ª—ñ—î–Ω—Ç—É
    )
    logger.info(f"‚úÖ CORS configured for origins: {settings.cors_origins}")


def configure_security(app: FastAPI) -> None:
    """
    –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–æ–≤–æ—ó –±–µ–∑–ø–µ–∫–∏ –¥–æ–¥–∞—Ç–∫—É.
    
    –î–æ–¥–∞—î–º–æ middleware –¥–ª—è –∑–∞—Ö–∏—Å—Ç—É –≤—ñ–¥ –æ—Å–Ω–æ–≤–Ω–∏—Ö –∞—Ç–∞–∫:
    - Host header injection
    - Timing attacks —á–µ—Ä–µ–∑ consistent response times
    """
    # –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ Host header attacks
    app.add_middleware(
        TrustedHostMiddleware,
        allowed_hosts=["*"]  # –í production –≤–∞—Ä—Ç–æ –æ–±–º–µ–∂–∏—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º–∏ –¥–æ–º–µ–Ω–∞–º–∏
    )
    
    # –î–æ–¥–∞—î–º–æ –∫–∞—Å—Ç–æ–º–Ω–∏–π timing middleware
    app.add_middleware(TimingMiddleware)
    
    logger.info("üîí Security middleware configured")


def configure_exception_handlers(app: FastAPI) -> None:
    """
    –¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫.
    
    –¶–µ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–±–µ–∑–ø–µ—á—É—î –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
    –ø—Ä–∏ –ø–æ–º–∏–ª–∫–∞—Ö —Ç–∞ –∑–∞—Ö–∏—â–∞—î –≤—ñ–¥ –≤–∏—Ç–æ–∫—É –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó.
    
    –ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–Ω–∏–π –ø–∞—Ç–µ—Ä–Ω: Chain of Responsibility
    –†—ñ–∑–Ω—ñ —Ç–∏–ø–∏ –ø–æ–º–∏–ª–æ–∫ –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è —Ä—ñ–∑–Ω–∏–º–∏ handlers.
    """
    
    @app.exception_handler(HTTPException)
    async def http_exception_handler(request: Request, exc: HTTPException):
        """–û–±—Ä–æ–±–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö HTTP –ø–æ–º–∏–ª–æ–∫."""
        logger.warning(
            f"HTTP Exception: {exc.status_code} {exc.detail} "
            f"Path: {request.url.path}"
        )
        
        return JSONResponse(
            status_code=exc.status_code,
            content=ErrorResponse(
                success=False,
                message="HTTP Error occurred",
                error=ErrorDetail(
                    error_code=f"HTTP_{exc.status_code}",
                    error_message=str(exc.detail),
                    error_details={"status_code": exc.status_code}
                )
            ).dict()
        )
    
    @app.exception_handler(ValueError)
    async def value_error_handler(request: Request, exc: ValueError):
        """–û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö."""
        logger.error(f"Validation Error: {str(exc)} Path: {request.url.path}")
        
        return JSONResponse(
            status_code=400,
            content=ErrorResponse(
                success=False,
                message="Validation error",
                error=ErrorDetail(
                    error_code="VALIDATION_ERROR",
                    error_message=str(exc),
                    error_details={"path": str(request.url.path)}
                )
            ).dict()
        )
    
    @app.exception_handler(Exception)
    async def general_exception_handler(request: Request, exc: Exception):
        """–û–±—Ä–æ–±–∫–∞ –≤—Å—ñ—Ö –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫."""
        # –õ–æ–≥—É—î–º–æ –ø–æ–≤–Ω—É —Ç—Ä–∞—Å—É –ø–æ–º–∏–ª–∫–∏ –¥–ª—è debugging
        logger.error(
            f"Unhandled Exception: {type(exc).__name__}: {str(exc)} "
            f"Path: {request.url.path}\n"
            f"Traceback: {traceback.format_exc()}"
        )
        
        return JSONResponse(
            status_code=500,
            content=ErrorResponse(
                success=False,
                message="Internal server error occurred",
                error=ErrorDetail(
                    error_code="INTERNAL_SERVER_ERROR",
                    error_message="An unexpected error occurred. Please try again later.",
                    error_details={
                        "error_type": type(exc).__name__,
                        "path": str(request.url.path),
                        # –í production –Ω–µ –≤–∫–ª—é—á–∞—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ–º–∏–ª–∫–∏
                        "debug_info": str(exc) if settings.log_level == "DEBUG" else None
                    }
                )
            ).dict()
        )
    
    logger.info("üö® Exception handlers configured")


def register_routes(app: FastAPI) -> None:
    """
    –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö API routes.
    
    –û—Ä–≥–∞–Ω—ñ–∑–æ–≤—É—î–º–æ endpoints –≤ –ª–æ–≥—ñ—á–Ω—ñ –≥—Ä—É–ø–∏ –¥–ª—è –∫—Ä–∞—â–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ API.
    –ö–æ–∂–Ω–∞ –≥—Ä—É–ø–∞ endpoints –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –æ–∫—Ä–µ–º–æ–º—É –º–æ–¥—É–ª—ñ.
    """
    # API –≤–µ—Ä—Å—ñ–æ–Ω—É–≤–∞–Ω–Ω—è - –≤—Å—ñ routes –ø—ñ–¥ /api/v1/
    API_V1_PREFIX = "/api/v1"
    
    # Endpoints –¥–ª—è –ø–æ—à—É–∫—É –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
    app.include_router(
        search.router,
        prefix=f"{API_V1_PREFIX}/search",
        tags=["Search"],  # –î–ª—è –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è –≤ Swagger UI
        responses={
            404: {"description": "Not found"},
            500: {"description": "Internal server error"}
        }
    )
    
    # Endpoints –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
    app.include_router(
        documents.router,
        prefix=f"{API_V1_PREFIX}/documents", 
        tags=["Documents"],
        responses={
            404: {"description": "Not found"},
            500: {"description": "Internal server error"}
        }
    )
    
    logger.info("üõ£Ô∏è API routes registered")


def customize_openapi_schema(app: FastAPI) -> None:
    """
    –ö–∞—Å—Ç–æ–º—ñ–∑–∞—Ü—ñ—è OpenAPI —Å—Ö–µ–º–∏ –¥–ª—è –∫—Ä–∞—â–æ—ó –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó.
    
    –î–æ–¥–∞—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —è–∫—ñ—Å–Ω–æ—ó
    API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó –≤ Swagger UI —Ç–∞ ReDoc.
    """
    def custom_openapi():
        if app.openapi_schema:
            return app.openapi_schema
        
        openapi_schema = get_openapi(
            title=settings.app_name,
            version=settings.app_version,
            description=app.description,
            routes=app.routes,
        )
        
        # –î–æ–¥–∞—î–º–æ –∫–∞—Å—Ç–æ–º–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
        openapi_schema["info"].update({
            "contact": {
                "name": "Document Search API Support",
                "email": "support@example.com"  # –ó–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω–∏–π email
            },
            "license": {
                "name": "MIT License",
                "url": "https://opensource.org/licenses/MIT"
            }
        })
        
        # –î–æ–¥–∞—î–º–æ –∑–∞–≥–∞–ª—å–Ω—ñ responses –¥–ª—è –≤—Å—ñ—Ö endpoints
        openapi_schema["components"]["responses"] = {
            "ValidationError": {
                "description": "Validation error",
                "content": {
                    "application/json": {
                        "schema": {"$ref": "#/components/schemas/ErrorResponse"}
                    }
                }
            },
            "InternalError": {
                "description": "Internal server error", 
                "content": {
                    "application/json": {
                        "schema": {"$ref": "#/components/schemas/ErrorResponse"}
                    }
                }
            }
        }
        
        app.openapi_schema = openapi_schema
        return app.openapi_schema
    
    app.openapi = custom_openapi
    logger.info("üìö OpenAPI schema customized")


# === –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–æ–¥–∞—Ç–∫—É ===

# –°—Ç–≤–æ—Ä—é—î–º–æ –≥–æ–ª–æ–≤–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –¥–æ–¥–∞—Ç–∫—É
app = create_application()

# –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –≤—Å—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
configure_cors(app)
configure_security(app)
configure_exception_handlers(app)
register_routes(app)
customize_openapi_schema(app)


# === Health Check Endpoint ===

@app.get("/health", tags=["System"])
async def health_check():
    """
    –ë–∞–∑–æ–≤–∏–π health check endpoint.
    
    –¶–µ–π endpoint –∫—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–ª–∏–≤–∏–π –¥–ª—è:
    - Load balancers –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∂–∏–≤–æ—Å—Ç—ñ —Å–µ—Ä–≤—ñ—Å—É
    - Monitoring —Å–∏—Å—Ç–µ–º –¥–ª—è –∞–ª–µ—Ä—Ç—ñ–≤
    - Kubernetes health probes
    - CI/CD pipelines –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ deployment
    """
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞–Ω –æ—Å–Ω–æ–≤–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
        search_stats = search_service.get_document_stats()
        
        return {
            "status": "healthy",
            "timestamp": time.time(),
            "version": settings.app_version,
            "components": {
                "search_service": "ok" if search_stats else "error",
                "vector_database": search_stats.get("system_health", {}).get("vector_db_healthy", False),
                "ml_model": search_stats.get("system_health", {}).get("model_loaded", False)
            }
        }
    except Exception as e:
        logger.error(f"Health check failed: {str(e)}")
        return JSONResponse(
            status_code=503,  # Service Unavailable
            content={
                "status": "unhealthy",
                "timestamp": time.time(),
                "error": str(e)
            }
        )


@app.get("/", tags=["System"])
async def root():
    """
    –ö–æ—Ä–µ–Ω–µ–≤–∏–π endpoint –∑ –±–∞–∑–æ–≤–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ API.
    
    –ö–æ—Ä–∏—Å–Ω–æ –¥–ª—è —à–≤–∏–¥–∫–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —â–æ —Å–µ—Ä–≤—ñ—Å –ø—Ä–∞—Ü—é—î
    —Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω—å –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é.
    """
    return {
        "message": f"üîç {settings.app_name} v{settings.app_version}",
        "description": "Semantic Document Search API",
        "documentation": {
            "swagger_ui": "/docs",
            "redoc": "/redoc",
            "openapi_schema": "/openapi.json"
        },
        "health_check": "/health",
        "api_prefix": "/api/v1"
    }


# === –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –≤ development —Ä–µ–∂–∏–º—ñ ===

def run_development_server():
    """
    –ó–∞–ø—É—Å–∫ development —Å–µ—Ä–≤–µ—Ä–∞.
    
    –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ—ó —Ä–æ–∑—Ä–æ–±–∫–∏.
    –í production –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ gunicorn –∞–±–æ —ñ–Ω—à–∏–π WSGI —Å–µ—Ä–≤–µ—Ä.
    """
    uvicorn.run(
        "app.main:app",
        host=settings.api_host,
        port=settings.api_port,
        reload=True,      # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –∫–æ–¥—É
        log_level=settings.log_level.lower(),
        access_log=True   # –õ–æ–≥—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö HTTP –∑–∞–ø–∏—Ç—ñ–≤
    )


# –¢–æ—á–∫–∞ –≤—Ö–æ–¥—É –¥–ª—è direct execution
if __name__ == "__main__":
    logger.info("üöÄ Starting development server...")
    run_development_server()